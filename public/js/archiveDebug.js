/**
 * Script de d√©bogage et correction des archives
 * Utilise les nouvelles routes d'analyse et migration
 */

class ArchiveDebugger {
  constructor() {
    this.baseUrl = window.location.origin;
  }

  // Analyser l'√©tat actuel des archives
  async analyzeCurrentState() {
    try {
      console.log("üîç Analyse des archives en cours...");

      const response = await fetch(`${this.baseUrl}/api/archives/analyze`);
      const data = await response.json();

      if (data.success) {
        console.log("üìä Analyse termin√©e :", data);
        this.displayAnalysis(data);
        return data;
      } else {
        console.error("‚ùå Erreur d'analyse :", data.message);
        return null;
      }
    } catch (error) {
      console.error("‚ùå Erreur lors de l'analyse :", error);
      return null;
    }
  }

  // Afficher l'analyse dans la console de mani√®re lisible
  displayAnalysis(data) {
    console.log("\n=== ANALYSE DES ARCHIVES ===");

    console.log("\nüìà R√©partition actuelle :");
    data.analysis.forEach((item) => {
      console.log(
        `  ${item.action_type} (${item.page_origine || "N/A"}) : ${
          item.count
        } dossiers`
      );
      if (item.sample_references && item.sample_references.length > 0) {
        console.log(`    Exemples : ${item.sample_references.join(", ")}`);
      }
    });

    if (data.problematic_entries.length > 0) {
      console.log("\n‚ö†Ô∏è Dossiers mal cat√©goris√©s :");
      data.problematic_entries.forEach((entry) => {
        console.log(
          `  ${entry.dossier_reference} : ${entry.action_type} ‚Üí ${entry.suggested_category}`
        );
      });
    } else {
      console.log("\n‚úÖ Aucun dossier mal cat√©goris√© d√©tect√©");
    }

    console.log(
      `\nüìù R√©sum√© : ${data.summary.total_problematic} dossiers n√©cessitent une migration`
    );
  }

  // Migrer les donn√©es mal cat√©goris√©es
  async migrateData() {
    try {
      console.log("üîÑ Migration des donn√©es en cours...");

      const response = await fetch(
        `${this.baseUrl}/api/archives/migrate-data`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
        }
      );

      const data = await response.json();

      if (data.success) {
        console.log("‚úÖ Migration termin√©e :", data);
        this.displayMigrationResults(data.results);
        return data;
      } else {
        console.error("‚ùå Erreur de migration :", data.message);
        return null;
      }
    } catch (error) {
      console.error("‚ùå Erreur lors de la migration :", error);
      return null;
    }
  }

  // Afficher les r√©sultats de migration
  displayMigrationResults(results) {
    console.log("\n=== R√âSULTATS DE MIGRATION ===");
    console.log(
      `üì¶ Ordres de livraison corrig√©s : ${results.ordres_livraison_corriges}`
    );
    console.log(
      `üöõ Mise en livraison corrig√©s : ${results.mise_en_livraison_corriges}`
    );

    if (results.orders_updated.length > 0) {
      console.log("\nüìã Ordres de livraison mis √† jour :");
      results.orders_updated.forEach((order) => {
        console.log(`  - ${order.dossier_reference} (${order.action_type})`);
      });
    }

    if (results.mise_en_livraison_updated.length > 0) {
      console.log("\nüöõ Mise en livraison mis √† jour :");
      results.mise_en_livraison_updated.forEach((delivery) => {
        console.log(
          `  - ${delivery.dossier_reference} (${delivery.action_type})`
        );
      });
    }
  }

  // Processus complet : analyser puis migrer
  async fullDiagnostic() {
    console.log("üöÄ D√©marrage du diagnostic complet des archives...");

    // √âtape 1 : Analyser
    const analysis = await this.analyzeCurrentState();

    if (!analysis) {
      console.error("‚ùå Impossible de continuer sans analyse");
      return;
    }

    // √âtape 2 : Migrer si n√©cessaire
    if (analysis.summary.needs_migration) {
      console.log("\n‚ö° Migration n√©cessaire, d√©marrage...");
      const migration = await this.migrateData();

      if (migration) {
        console.log("\nüîÑ Nouvelle analyse apr√®s migration...");
        await this.analyzeCurrentState();
      }
    } else {
      console.log(
        "\n‚úÖ Aucune migration n√©cessaire, les donn√©es sont correctes"
      );
    }

    console.log("\nüéâ Diagnostic termin√© !");
  }

  // Tester les filtres d'archives
  async testArchiveFilters() {
    console.log("üß™ Test des filtres d'archives...");

    const filters = [
      { name: "Ordres de Livraison", action_type: "ordre_livraison_etabli" },
      { name: "Mise en Livraison", action_type: "mise_en_livraison" },
      { name: "Tous", action_type: "" },
    ];

    for (const filter of filters) {
      try {
        const response = await fetch(
          `${this.baseUrl}/api/archives?action_type=${filter.action_type}&limit=5`
        );
        const data = await response.json();

        console.log(`\nüìÇ ${filter.name} (${filter.action_type || "tous"}) :`);
        console.log(`  Total : ${data.total || 0} dossiers`);

        if (data.archives && data.archives.length > 0) {
          data.archives.forEach((archive) => {
            console.log(
              `  - ${archive.dossier_reference} (${archive.action_type}) - ${
                archive.page_origine || "N/A"
              }`
            );
          });
        } else {
          console.log("  Aucun dossier trouv√©");
        }
      } catch (error) {
        console.error(`‚ùå Erreur pour le filtre ${filter.name} :`, error);
      }
    }
  }
}

// Cr√©er une instance globale pour utilisation facile
window.archiveDebugger = new ArchiveDebugger();

// Instructions d'utilisation
console.log(`
üõ†Ô∏è DEBUGGER D'ARCHIVES DISPONIBLE

Commandes disponibles :
- archiveDebugger.analyzeCurrentState()     : Analyser l'√©tat actuel
- archiveDebugger.migrateData()             : Migrer les donn√©es mal cat√©goris√©es  
- archiveDebugger.fullDiagnostic()          : Diagnostic complet (recommand√©)
- archiveDebugger.testArchiveFilters()      : Tester les filtres d'affichage

Pour r√©soudre votre probl√®me, ex√©cutez :
archiveDebugger.fullDiagnostic()
`);
